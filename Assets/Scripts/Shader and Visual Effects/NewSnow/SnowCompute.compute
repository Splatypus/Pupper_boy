// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SnowPhysicsUpdate
#pragma kernel SnowFlashInput

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float Width;
float Height;
sampler2D Input;
sampler2D PreviousState;
float ElapsedTime;
int deltaX;
int deltaY;
float RecoverySpeed;
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void SnowPhysicsUpdate (uint3 id : SV_DispatchThreadID)
{
	float4 previousState = tex2Dlod(PreviousState, float4( (id.x+deltaX)/Width, (id.y-deltaY)/Height, 0, 0));	
	float depth = tex2Dlod(Input, float4(id.x/Width, id.y/Height, 0, 0)).r;

	previousState = float4(max(previousState.r - ElapsedTime* RecoverySpeed, depth), previousState.gba);

    //The edge percent of the texture is all zeroed. This helps reduce artifacting from sampling outside the texture.
    previousState.r *= (id.x >= Width * 0.01) &&
	    (id.x <= Width * 0.99) &&
	    (id.y >= Height * 0.01) &&
	    (id.y <= Height * 0.99);

	Result[id.xy] = previousState;
}

[numthreads(8,8,1)]
void SnowFlashInput(uint3 id : SV_DispatchThreadID){
	//Sets everything to a specific texture
	Result[id.xy] = float4(0,0,0,1);//tex2Dlod(Input, float4(id.x/Width, id.y/Height, 0, 0));
}
